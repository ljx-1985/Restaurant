Cursor 项目 HTML 编码风格规范

1. 引言

HTML 是构成 Cursor 项目前端页面的骨架。编写高质量的 HTML 代码对于保障页面的结构清晰、语义正确、可访问性、性能和可维护性至关重要。本规范旨在为 Cursor 项目的 HTML 编写提供详细的指导原则和要求。

本规范是对 Cursor 项目通用编码风格规范和通用前端开发规范的补充。通用规范中的原则（如一致性、可读性、意图明确、使用自动化工具等）以及前端规范中的总体原则（如组件化、模块化、代码分离、性能、可访问性、响应式）同样适用于 HTML 代码。

2. 通用原则 (HTML 重点)

语义化 (Semantics): 使用具有正确语义的 HTML 标签来描述内容的含义和结构，而不是仅仅为了视觉效果。
可访问性 (Accessibility - A11y): 确保 HTML 结构能够被辅助技术（如屏幕阅读器）理解和操作，让所有人都能平等地访问和使用内容。
简洁性 (Conciseness): 编写精简、避免不必要嵌套的 HTML 结构。
标准化 (Standardization): 遵循 HTML5 的最新标准。
性能 (Performance): 考虑 HTML 结构和元素加载对页面性能的影响。
3. 基本格式化 (Basic Formatting)

缩进 (Indentation): 使用与项目通用缩进规则一致的缩进方式（例如，统一使用 2 个或 4 个空格）来体现标签之间的父子关系。
大小写 (Case Sensitivity): 元素名、属性名和属性值（除特定情况外，如文件路径）一律使用小写。
属性引号 (Attribute Quoting): 所有属性值必须使用双引号 " 包围。
HTML

<a href="/link" class="button">Link</a>

<a href=/link class='button'>Link</a>
<a href="/link" class=button>Link</a>
自闭合标签 (Self-Closing Tags): HTML5 中，一些标签是自闭合的（如 <br>, <hr>, <img>, <input>, <link>, <meta>）。在 HTML5 语法中，这些标签的末尾无需加斜杠 /。
HTML

<br>
<img src="image.png" alt="Image">

布尔属性 (Boolean Attributes): HTML5 中，布尔属性（如 required, checked, disabled, selected, readonly）只需出现属性名即可，无需赋值。
HTML

<input type="checkbox" checked required>

<input type="checkbox" checked="checked" required="required">
4. 文档结构 (Document Structure)

DOCTYPE: 必须使用 HTML5 的文档类型声明：<!DOCTYPE html>。
基本结构: 每个 HTML 文件必须包含 <html>, <head>, <body> 标签，并按照正确的顺序组织。
<head> 内容:
字符编码声明必须是 <meta charset="UTF-8">，并且应作为 <head> 标签内的第一个元素，确保浏览器正确解析字符。
必须包含视口设置 <meta name="viewport" content="width=device-width, initial-scale=1.0">，以支持响应式设计。
必须包含 <title> 标签，其内容应准确描述页面内容，有助于用户和搜索引擎理解。
CSS 文件应使用 <link> 标签在 <head> 中引入，以避免 FOUC (Flash of Unstyled Content)。
Favicon 和其他网站图标也应在 <head> 中引入。
<body> 内容: 包含页面的所有可见内容。脚本标签 <script> 通常放在 <body> 的底部或使用 defer / async 属性，以避免阻塞页面渲染。
5. 语义化 HTML (Semantic HTML)

优先使用语义化标签: 使用 HTML5 提供的语义化标签来构建页面结构，而不是全部使用无语义的 <div> 或 <span>。例如：
使用 <header> 表示页面或区域的头部。
使用 <nav> 表示导航链接区域。
使用 <main> 表示页面主要内容区域（一个页面只应有一个）。
使用 <article> 表示独立、完整的内容块（如博客文章、新闻报道）。
使用 <section> 表示文档中的一个独立部分，通常带有标题。
使用 <aside> 表示与主要内容相关但不属于主要流程的内容（如侧边栏）。
使用 <footer> 表示页面或区域的底部。
使用 <figure> 和 <figcaption> 组合来标记插图和图注。
使用 <time> 标记日期和时间。
使用 <mark> 标记文本中的高亮部分。
正确使用标题标签: 使用 <h1> 到 <h6> 标签来表示页面内容的层级结构。<h1> 标签在一个页面中通常只使用一次，表示页面最主要的标题。标题层级不应跳跃（例如，<h1> 后直接跟 <h3>）。
列表: 使用 <<ul>>, <ol>, <dl> 及其对应的子标签来表示无序列表、有序列表和定义列表。
表单: 使用 <form>, <label>, <input>, <button>, <select>, <textarea> 等标签来构建表单，并确保使用 <label> 的 for 属性与表单控件关联。
6. 属性 (Attributes)

顺序: 建议为属性指定一个一致的排序，以提高可读性。一个推荐的顺序是：
class
id, name
data-* 属性
src, href, alt
aria-*, role (可访问性相关)
其他属性
alt 属性: 所有 <img> 标签都必须包含 alt 属性。对于内容性图片，alt 属性应提供图片的描述性文本。对于纯装饰性图片，可以使用空的 alt=""。
链接和图片路径: 使用相对路径或绝对路径取决于项目需求，但需保持一致性。确保路径正确。
自定义数据属性 (data-*): 使用 data-* 属性来存储与元素相关的自定义数据，供 JavaScript 使用。属性名应使用小写字母和连字符。
7. Class 和 ID

命名: class 和 id 的命名应遵循项目通用的命名规范和前端 CSS/JS 相关的命名约定（例如，如果使用 BEM，则类名应遵循 BEM 规范）。
用途区别:
Class: 主要用于 CSS 样式化和 JavaScript 选择元素添加行为。一个元素可以有多个 class。
ID: 用于元素的唯一标识。在整个文档中，任何一个 ID 值都必须是唯一的。ID 常用于：作为锚点链接的目标 (#id)、JavaScript 直接选择特定元素、<label> 的 for 属性目标、以及 WAI-ARIA 属性的引用目标。
选择器优先级: 由于 ID 的优先级高于 Class，优先使用 Class 作为样式和行为的钩子。避免过度依赖 ID 进行样式化或批量行为绑定。
8. 可访问性 (Accessibility - A11y)

在 HTML 层面实现可访问性是前端开发者的重要职责：

语义化结构: (再次强调其对可访问性的重要性)。屏幕阅读器等辅助技术依赖语义化标签来理解页面结构和内容类型。
ARIA 属性和角色 (ARIA Attributes & Roles): 当原生的 HTML 语义不足以表达 UI 组件的功能或状态时，使用 WAI-ARIA (Accessible Rich Internet Applications) 属性和角色来增强语义。例如，使用 role="button" 标记一个看起来像按钮但不是 <button> 标签的元素，使用 aria-expanded="true/false" 标记一个折叠/展开状态的元素。遵循 ARIA 使用五法则（rule of native semantics, don't reinvent semantics, only add ARIA when native semantics are insufficient, ARIA doesn't affect the DOM, ARIA state/property names affect semantics not behavior）。
键盘导航: 确保所有交互元素（链接、按钮、表单控件）都可以通过 Tab 键聚焦，并可以通过 Enter 或 Space 键激活。使用 tabindex 属性控制元素的聚焦顺序（非负值按源码顺序，tabindex="0" 使元素可聚焦，-1 使元素可编程聚焦但不通过 Tab 键）。
表单可访问性:
始终使用 <label> 标签，并将其 for 属性与对应的表单控件的 id 关联。
为必须填写的表单字段使用 required 属性。
图像 alt 文本: 提供有意义的 alt 文本。
色彩对比度: 确保文本和背景色之间有足够的对比度（通常由设计和 CSS 规范保障）。
9. 性能考虑 (Performance Considerations)

优化资源加载:
CSS 放在 <head> 中，JavaScript 文件链接放在 <body> 底部或使用 defer/async 属性。
对于首屏渲染必需的少量关键 CSS，可以考虑内联到 <head> 中。
图片优化:
使用适合的图片格式（如 WebP）。
使用 <picture> 元素或 <img> 的 srcset 和 sizes 属性，为不同设备和分辨率提供优化过的图片版本。
为 <img> 标签指定 width 和 height 属性，减少布局偏移 (Layout Shift)。
对于非首屏图片，使用 loading="lazy" 属性实现懒加载。
减少 DOM 深度: 避免过度嵌套的 HTML 结构，复杂的 DOM 树会增加页面解析和渲染的时间。
避免使用 <iframe>: <iframe> 元素会创建独立的上下文，增加页面加载负担，且存在可访问性和安全性问题。除非必要，应避免使用。
10. 注释 (Comments)

使用标准的 HTML 注释格式：``。
注释应简洁明了，用于解释非显而易见的结构、重要的标记点或组件边界。
HTML

<div class="user-profile-card">
    </div>
避免在注释中包含敏感信息。
11. 应避免的实践 (Practices to Avoid)

内联样式 (style 属性): 除了在特定框架或库要求下（如某些 CSS-in-JS 库），禁止在 HTML 标签中使用 style="" 属性。样式应放在 CSS 文件中。
内联脚本 (<script> 标签内部直接写代码): 除非是少量、简单的初始化脚本或为了性能内联的关键脚本，否则禁止在 <script> 标签内部直接编写大量 JavaScript 代码。脚本应放在外部 .js 文件中。
过时或废弃的标签和属性: 禁止使用 HTML4 或更早版本中已废弃的标签（如 <center>, <font>, <frame>, <frameset>, <big>, <tt> 等）和属性。
使用表格布局: 禁止使用 <table> 标签进行页面布局。表格仅应用于展示表格数据。
不必要的嵌套: 避免创建冗余或过深的 DOM 结构。
12. 与其他技术的交互 (Interaction with Other Technologies)

CSS 钩子: 主要使用 class 属性作为 CSS 样式规则的钩子。避免过度依赖标签名或 ID 作为样式选择器（特别是通用样式）。
JavaScript 钩子: 使用 class 和 id 作为 JavaScript 选择元素的钩子。推荐使用 data-* 属性作为专门用于 JavaScript 行为绑定的钩子，将样式和行为的 class 分开，提高可维护性（例如，样式使用 .user-card__button, 行为使用 data-js="user-card-toggle"）。
13. 自动化工具 (Automation Tools)

代码格式化工具 (Formatters): 推荐使用 Prettier 或 VS Code 的内置格式化功能来自动格式化 HTML 代码，确保缩进、属性引号、换行等方面符合规范。
代码风格检查工具 (Linters): 使用 HTMLHint 等工具检查 HTML 代码的风格、可访问性和常见错误。
可访问性检查工具: 使用 Lighthouse, Axe, Wave 等工具检查页面的可访问性问题。