Cursor 项目通用文档编写规范

1. 引言

Cursor 项目的成功不仅取决于高质量的代码，也依赖于高质量的文档。良好的文档能够为项目的各个参与者（包括开发者、用户、贡献者、管理者等）提供必要的信息，促进理解、协作和项目的可持续发展。

本通用文档编写规范旨在提供一套适用于 Cursor 项目所有非代码注释类文档（例如 README, 安装指南, 贡献指南等）的统一标准和指导原则。特定技术栈的代码内部文档/注释（如函数、类、模块的详细 API 文档）应遵循各自语言或框架的推荐规范（如 Python 的 Docstrings, JavaScript/TypeScript 的 JSDoc/TSDoc 等），但其生成或引用的文档应与本通用规范保持一致的风格和链接。

2. 总体原则

准确性 (Accuracy): 文档内容必须准确反映项目的当前状态、功能和操作步骤。当项目发生变化时，文档必须同步更新。过时或错误的文档比没有文档更具误导性。
清晰性 (Clarity): 使用简洁、明确、易于理解的语言。避免含糊不清、过于专业或只有少数人理解的术语和缩写。如果必须使用，应提供解释。
完整性 (Completeness): 文档应涵盖目标读者需要了解的所有必要信息。根据文档类型的不同，完整性的要求也不同（例如，README 侧重概览，安装指南侧重操作步骤）。
一致性 (Consistency): 在整个项目的所有通用文档中，保持术语、命名、格式、结构和风格的统一。
可维护性 (Maintainability): 文档应结构清晰，易于查找和更新。优先使用易于版本控制和协作的格式（如 Markdown）。
面向读者 (Audience-oriented): 明确文档的目标读者是谁，并根据读者的背景和需求调整文档的深度和内容。例如，用户文档应侧重如何使用，开发者文档应侧重如何开发和贡献。
可发现性 (Findability): 文档应有清晰的组织结构、标题层级和必要的交叉引用或索引，方便读者快速找到所需信息。
3. 通用文档类型与内容

以下是 Cursor 项目应该包含的核心通用文档类型及其主要内容要求：

README.md (项目概览)

项目名称和一句简洁的标语/描述。
项目解决的核心问题或提供的价值。
项目状态 (例如：开发中, Beta 版本, 稳定版本)。
主要特性列表。
技术栈概览 (简要提及使用的主要语言/框架)。
快速开始/简要安装指南（最简单的方式让读者运行起来）。
重要链接: 链接到详细安装指南 (INSTALL.md), 贡献指南 (CONTRIBUTING.md), 许可证 (LICENSE), 以及其他重要文档或网站。
联系方式或支持途径（如果适用）。
INSTALL.md / SETUP.md (安装与设置指南)

详细的先决条件列表（操作系统、依赖软件、版本要求等）。
分步的安装或设置说明，涵盖所有必要的步骤（例如，克隆代码、安装依赖、配置环境、运行构建命令、初始化数据库等）。
针对不同操作系统或环境的特殊说明。
如何运行项目的开发模式或生产模式。
常见安装问题的排查方法 (FAQ 或链接到 FAQ)。
CONTRIBUTING.md (贡献指南)

欢迎贡献的声明。
如何报告 Bug 和提交功能请求。
贡献代码的流程（例如，Fork 仓库、创建分支、提交 Commit、发送 Pull Request）。
代码风格和格式化要求（可以链接到各语言的具体规范）。
Commit Message 规范。
如何运行测试。
Pull Request 评审流程简介。
行为准则链接 (CODE_OF_CONDUCT.md, 如果有)。
CHANGELOG.md (变更日志)

记录项目的版本发布历史。
每个版本列出主要的新增功能 (Added)、变更 (Changed)、废弃 (Deprecated)、移除 (Removed)、修复 (Fixed) 和安全更新 (Security)。
遵循 Keep a Changelog 等规范化格式更佳。
LICENSE (项目许可证)

包含项目使用的开源许可证全文。
ARCHITECTURE.md / DESIGN.md (架构与设计概览) (可选但强烈推荐)

项目的高层架构设计（例如，客户端-服务器模型、微服务结构等）。
主要组件及其职责。
组件之间的交互方式和数据流。
关键技术选型及其理由。
可以使用流程图、组件图、部署图等图示辅助说明。
USER_GUIDE.md (用户指南) (如果 Cursor 是一个直接供用户使用的应用或工具)

面向非开发者的用户。
详细说明如何使用项目的各项功能。
提供步骤说明和使用示例。
解释用户界面（如果适用）。
常见问题解答 (FAQ) 或故障排除 (Troubleshooting)。
TROUBLESHOOTING.md / FAQ.md (故障排除/常见问题) (可选)

收集和解答用户或开发者遇到的常见问题。
提供已知问题的解决方案或变通方法。
4. 文档格式与风格

格式: 所有通用文档优先使用 Markdown (.md) 格式编写。Markdown 易于阅读、编写，且与版本控制系统高度兼容。
语言: 确定一种主要的文档语言（例如中文或英文）。如果需要支持多语言，考虑使用文档本地化工具或平台。
标题: 使用 #、##、### 等 Markdown 标记创建清晰的标题层级。标题应简洁明了，准确概括其内容。
列表: 使用 -、* 或 1.、2. 创建列表，使信息结构化。
代码块: 使用反引号（```）标记代码片段或命令，并指定语言类型以获得语法高亮。
链接: 使用 [链接文本](URL) 创建超链接，方便读者跳转到相关文档或外部资源。在项目内部文档之间建立清晰的相互链接。
强调: 使用 *斜体* 或 **粗体** 标记重要术语或需要强调的内容。
图示: 对于复杂的概念、架构或流程，使用图示（流程图、架构图、时序图等）可以更直观地说明问题。将图示文件（如 .png, .jpg, .svg 或 PlantUML .puml 文件）与文档一起纳入版本控制，并在文档中引用。
一致性: 确保所有文档的标题风格、段落缩进、列表格式、代码块风格等保持一致。

5. 文档存放位置

所有核心通用文档 (README.md, INSTALL.md, CONTRIBUTING.md, CHANGELOG.md, LICENSE) 应直接存放在项目仓库的根目录。
其他通用文档（如 ARCHITECTURE.md, USER_GUIDE.md, FAQ.md）可以存放在根目录，或集中存放在根目录下的 docs/ 或 documentation/ 子目录中。在 README.md 中提供这些文档的链接。

6. 文档维护流程

集成到工作流程: 将文档更新视为项目开发和维护的必要环节。任何涉及功能、安装、构建、贡献流程等方面的代码修改或功能新增，都必须伴随相关的文档更新。
版本控制: 将所有通用文档文件纳入版本控制系统（如 Git），与代码一同管理。
代码评审包含文档评审: 在 Pull Request 或 Merge Request 中，文档的修改应与代码修改一同提交评审。评审者应同时评审代码和文档。
定期检查: 定期（例如，每个版本发布前）检查通用文档的准确性和完整性。

7. 评审流程

所有通用文档的修改和新增都应通过代码评审流程进行。
评审应关注文档内容的准确性、清晰度、完整性、是否符合本规范的格式和风格要求。
鼓励非代码核心开发者参与通用文档的评审，以从不同视角提高文档的质量和易读性。

8. 工具推荐

版本控制: Git (用于协同编写和管理文档)。
Markdown 编辑器/预览器: VS Code (内置预览), Typora, Obsidian 等。
图表工具: PlantUML (文本生成图), draw.io, Miro 等。
静态网站生成器: 如果文档量较大且需要更好的导航和搜索功能，可以考虑使用 MkDocs, Sphinx (虽然常用于 Python，但也可用于构建通用文档), VuePress, Docusaurus 等工具，将 Markdown 文件转化为静态网站。