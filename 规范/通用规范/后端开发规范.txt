Cursor 项目通用后端开发规范

后端是 Cursor 项目处理业务逻辑、管理数据、保障安全的核心。高质量的后端代码和规范的开发实践对于保障系统的稳定性、性能、安全性和可扩展性至关重要。本规范旨在为 Cursor 项目的后端开发提供通用的指导原则和要求。

1. 总体原则 (后端重点)

除了项目通用的总体原则（准确性、清晰性、一致性、可维护性、面向读者、可发现性）外，后端开发尤为强调以下原则：

安全性 (Security First): 安全不是附加功能，而是核心要素。所有设计和实现都必须优先考虑安全性，防御潜在的攻击。
可靠性 (Reliability): 后端服务必须稳定运行，能够正确处理请求、管理数据和应对错误。
可伸缩性 (Scalability): 后端架构应考虑未来用户量和数据量的增长，能够方便地进行水平或垂直伸缩。
性能 (Performance): 关注请求响应时间、资源消耗（CPU, 内存, 磁盘, 网络），优化关键路径。
可维护性 (Maintainability): 代码结构清晰，逻辑易于理解，便于未来的修改、扩展和 Bug 修复。
职责分离 (Separation of Concerns): 将不同的功能（如请求处理、业务逻辑、数据访问）分离到不同的模块或层中。
2. 架构与组织

分层架构 (Layered Architecture): 采用清晰的分层架构来组织代码，常见分层包括：
接口层/表示层 (Interface/Presentation Layer): 负责接收外部请求（如 HTTP 请求），进行请求解析、参数校验（初步）、认证鉴权、格式化响应数据等。这一层不应包含核心业务逻辑。
业务逻辑层/服务层 (Business Logic/Service Layer): 实现核心业务逻辑，协调领域对象完成具体的业务流程。它是后端的核心，不应直接依赖接口层或数据访问层的具体实现。
数据访问层 (Data Access Layer - DAL): 负责与数据库或其他数据源进行交互，提供数据 CURD（创建、读取、更新、删除）接口。它屏蔽了底层数据存储的细节。
领域模型层 (Domain Model Layer): 定义业务实体、值对象等，反映业务领域的概念和规则。
模块化: 将不同功能或业务领域的代码组织成独立的模块、包或服务，降低模块间的耦合度。模块应职责单一，对外提供清晰的接口。
依赖管理: 明确模块之间的依赖关系，避免不必要的循环依赖。
依赖注入 (Dependency Injection - DI): 考虑使用依赖注入容器来管理组件之间的依赖关系，提高代码的可测试性和灵活性。
3. API 设计

遵循通用 API 规范: 后端对外提供的 API（如 RESTful API）必须严格遵循 Cursor 项目的通用 API 规范（通常在文档中另行说明，例如基于 OpenAPI 规范）。
资源导向 (Resource-Oriented): 如果使用 RESTful API，将业务概念抽象为资源（名词），使用 URI 标识资源。
HTTP 方法: 使用标准的 HTTP 方法（GET, POST, PUT, PATCH, DELETE）来表示对资源的操作语义。
状态码: 返回标准的 HTTP 状态码，准确反映请求的处理结果（如 200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Internal Server Error 等）。
统一响应格式: 设计统一的 API 请求成功和失败的响应格式，包括数据载荷、元信息（如分页信息）和错误信息（如错误码、错误消息）。
版本控制 (Versioning): 如果 API 可能发生不兼容变更，必须采用清晰的 API 版本控制策略（如 URL 版本 /v1/users, Header 版本等）。
输入/输出清晰: API 的输入参数和输出数据结构必须清晰、有文档，并进行严格的服务器端验证。
4. 数据处理与验证

服务器端验证: 所有来自外部的输入数据（包括 API 请求体、查询参数、Header 等）都必须在服务器端进行严格的验证和净化。不要信任来自客户端或任何外部源的数据。
数据序列化/反序列化: 使用安全、高效的库处理数据对象与外部格式（如 JSON, XML）之间的转换。
避免硬编码常量: 具有特定业务含义的字符串、数字等应定义为常量或使用枚举，避免在代码中硬编码“魔术”值。
5. 安全性最佳实践

输入验证与净化: (再次强调) 防止注入攻击（SQL 注入、OS Command Injection 等）、跨站脚本 (XSS) 等。使用安全的 API 和库进行数据库操作、命令执行等。
身份认证 (Authentication): 安全地验证用户身份。
密码必须使用强大的单向散列算法（如 bcrypt, scrypt）加盐存储，禁止明文存储。
使用安全的会话管理或 Token 机制（如 JWT），并确保 Token 的安全传输和验证。
权限控制 (Authorization): 验证经过身份认证的用户是否拥有执行某个操作的权限。权限检查应在后端业务逻辑层进行，不能仅依赖接口层的初步检查。
访问控制: 实施基于角色的访问控制 (RBAC) 或其他适合项目需求的访问控制模型。
敏感数据保护: 敏感数据（如个人身份信息、支付信息）应加密存储或传输。日志中严禁记录敏感信息。
依赖安全: 定期更新后端依赖库，并使用安全扫描工具检查已知漏洞。
API 安全:
对重要或资源消耗大的 API 进行速率限制 (Rate Limiting)。
正确配置 CORS (Cross-Origin Resource Sharing) 策略，限制允许跨域访问的源。
防止暴力破解、枚举用户等攻击。
日志安全: 控制日志的访问权限，防止日志泄露敏感信息。
6. 错误处理与日志

统一错误处理: 实现全局的错误处理机制，捕获未处理的异常。对于可预期的错误，应返回统一的错误响应格式和恰当的 HTTP 状态码。对于不可预期的错误，应记录详细日志但不向用户暴露内部细节。
日志记录: 使用标准的日志库进行规范的日志记录。
定义并使用合适的日志级别（如 DEBUG, INFO, WARNING, ERROR, CRITICAL）。
日志应包含足够的信息以便问题排查，例如请求 ID（用于关联一次请求的所有日志）、用户 ID、发生的具体时间、错误类型、错误消息、堆栈信息等。
禁止在日志中记录用户的密码、会话 Token、身份证号等敏感信息。
配置日志的输出目标（文件、控制台、远程日志收集系统）。
可观测性: 考虑集成应用性能监控 (APM) 和日志分析系统，以便实时监控服务状态、性能指标和错误情况。
7. 性能优化

优化关键路径: 识别和优化对系统性能影响最大的代码路径（通常是处理高频请求或涉及大量计算/I/O 的部分）。
数据库优化: 优化数据库 schema 设计、查询语句、索引。合理使用数据库连接池。
缓存: 对不经常变化但读取频繁的数据使用缓存机制（如内存缓存、Redis, Memcached）。
异步处理: 对于耗时或阻塞性的操作（如文件读写、外部服务调用、发送邮件），应采用异步方式处理，避免阻塞主请求线程。使用非阻塞 I/O。
并发与并行: 利用多线程、多进程或协程等机制，提高系统处理并发请求的能力。
资源管理: 有效管理内存、CPU、文件句柄等资源，避免资源泄漏。
8. 后端测试

单元测试 (Unit Testing): 对独立的函数、方法、类、模块进行单元测试，验证其内部逻辑的正确性。
集成测试 (Integration Testing): 测试后端不同组件之间的交互，例如服务层调用数据访问层、模块之间的接口调用。
API 测试: 对后端提供的 API 端点进行测试，验证请求处理、参数验证、业务逻辑、响应格式、状态码等是否符合预期。可以使用 Postman, curl 脚本或自动化测试框架。
数据库测试: 测试数据库访问代码的正确性，确保数据能被正确地存取和更新。
性能测试: 对关键 API 或整体服务进行负载测试和性能测试，确保在高并发或大数据量下的性能满足要求。
安全性测试: 包括输入验证测试、权限绕过测试、常见漏洞扫描等。
编写易于测试的代码，避免紧耦合，使用依赖注入等技术方便 Mock 或 Stub 依赖。
9. 依赖管理与部署

使用后端语言标准的包管理器（如 Python 的 pip）管理项目依赖，并使用虚拟环境隔离不同项目的依赖。
定期更新依赖，并关注依赖库的安全公告。
部署流程应有明确的文档和脚本。
采用安全、标准的方式进行配置管理，特别是敏感信息，应使用环境变量、配置服务或秘密管理工具，严禁硬编码或提交到代码仓库。
考虑使用容器化技术（如 Docker）打包应用及其依赖，简化部署和环境管理。
10. 后台任务与异步处理

对于长时间运行的任务、定时任务或不需要立即响应用户的任务，应使用异步任务队列（如 Celery）或独立的后台进程来处理，避免阻塞用户请求。
确保后台任务的可靠性，考虑任务重试、结果存储和监控。
11. 跨领域关注点 (后端视角)

API 契约: 与前端团队或其他消费者团队紧密协作，共同定义和维护 API 契约文档（如 OpenAPI spec）。后端负责实现并严格遵循该契约。
配置管理: 负责后端服务的环境配置、数据库连接信息、第三方服务密钥等敏感和环境相关的配置管理。
12. 工具与流程

利用 IDE 和调试器进行代码调试。
使用 Profiler 工具分析代码性能瓶颈。
使用数据库客户端工具管理和查询数据库。
将自动化测试、代码风格检查、安全扫描等集成到 CI/CD 流程中。
13. 与通用规范的关系

本通用后端开发规范是在 Cursor 项目通用编码风格规范和通用文档编写规范之上的补充。开发者在编写后端代码时，必须首先遵循本规范，同时遵守项目通用的编码风格（如命名、格式化、Git 使用），以及所使用具体后端语言或框架的特定规范。