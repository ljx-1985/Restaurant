Cursor 项目通用 Git 提交规范

1. 引言

良好的 Git 提交历史是项目宝贵的财富。清晰、一致的提交信息能够：

提高可读性: 使团队成员更容易理解每次提交的目的和内容。
简化代码评审: 评审者可以快速了解变更的上下文。
方便问题追踪: 快速定位引入特定 Bug 或功能的提交。
自动化: 支持自动化生成更新日志 (Changelog)、触发版本发布、关联 Issue 等。
本规范基于 Conventional Commits，旨在为 Cursor 项目的所有 Git 提交提供统一的标准。所有贡献者在提交代码时都必须遵循本规范。

2. 提交信息结构

一个符合规范的 Git 提交信息包含三个结构化的部分：Header (必需), Body (可选), 和 Footer (可选)，它们之间用空行分隔。

<type>(<scope>): <subject>

[空行]

<body> (可选)

[空行]

<footer> (可选)
3. Header (必需)

Header 是提交信息的第一行，也是必需的。它简要概括了本次提交的类型、范围和主题。

格式: <type>(<scope>): <subject>

3.1 type (必需)

type 是提交信息的类型，使用小写字母。它说明了本次提交的性质，是必需的。 Cursor 项目允许的提交类型包括：

feat: 新功能 (Features): 提交引入了新的功能或特性。
fix: Bug 修复 (Bug Fixes): 提交修复了已知的 Bug。
docs: 文档变更 (Docs): 提交只修改了文档（如 README, 其他 Markdown 文件等）。
style: 代码风格 (Styles): 提交修改了代码格式，但不影响代码的含义（如空格、分号、缩进、代码格式化）。
refactor: 代码重构 (Code Refactors): 提交重构了代码，不引入新功能，也不修复 Bug。
test: 测试相关 (Tests): 提交添加或修改了测试用例。
chore: 琐事 (Chores): 提交修改了构建过程或辅助工具、库等，不影响源文件或测试文件（如更新依赖库、配置 .gitignore）。
ci: 持续集成 (CI): 提交修改了 CI 配置文件或脚本。
build: 构建系统 (Builds): 提交修改了影响构建系统或外部依赖的配置（如 webpack, gulp, npm scripts 的修改）。
perf: 性能优化 (Performance Improvements): 提交改进了代码性能。
3.2 scope (可选)

scope 是提交影响的范围，用小括号 () 包围，紧跟在 type 后面。它用来指示本次提交影响了代码库的哪个部分（例如，哪个模块、组件或层）。scope 是可选的，是否使用取决于项目的粒度和团队约定。

使用小写字母、数字和连字符 -。
示例：feat(frontend-user-auth), fix(backend-api), docs(readme), refactor(database).
3.3 subject (必需)

subject 是提交的主题，简明扼要地描述了本次提交的内容。

使用祈使句，现在时态（例如，"change"，而不是 "changed" 或 "changes"）。
首字母小写。
末尾不要加句号 .。
长度通常不超过 50 个字符。
清晰地说明本次提交做了什么。
示例 Header:

feat: add user profile page
fix(backend): correct login error redirect
docs(readme): update installation section
style: format code with prettier
refactor(service): simplify authentication logic
test(frontend): add unit tests for button component
chore: update development dependencies
不兼容变更 (Breaking Changes) 的Header标记:

如果本次提交包含不兼容的变更 (Breaking Change)，可以在 type/scope 后紧跟一个感叹号 ! 来标记。

示例：feat!: add breaking API change, refactor(auth)!: remove deprecated function
当使用 ! 标记时，必须在 Footer 中包含 BREAKING CHANGE: 或 BREAKING-CHANGE: 部分来详细描述不兼容变更及其迁移方法。
4. Body (可选)

Body 提供提交的详细上下文信息。

用于详细说明本次提交的动机、解决的问题、实现细节或与之前行为的对比。
解释为什么进行此更改，而不是简单地重复做了什么。
每行长度通常不超过 72 个字符，以便于在各种 Git 工具中阅读。
与 Header 之间用一个空行分隔。
5. Footer (可选)

Footer 用于关联 Issue 或说明不兼容变更。

与 Body 之间用一个空行分隔。
引用 Issue: 用于链接本次提交相关的 Issue。
使用关键字 Closes, Fixes, Resolves, Ref 等，后面跟 Issue 号（例如 #123）或完整的 Issue URL。
使用 Closes, Fixes, Resolves 通常会自动关闭关联的 Issue（取决于 Git 托管平台的设置）。
示例：Closes #10, Fixes #456, #789
不兼容变更 (Breaking Changes):
如果本次提交引入了不兼容的变更，必须在 Footer 中以 BREAKING CHANGE: 或 BREAKING-CHANGE: 开头（冒号后跟一个空格或两个换行）。
详细描述不兼容变更的内容、原因以及如何迁移。
如前所述，也可以在 Header 中使用 ! 标记不兼容变更。Convention Commits 推荐使用 ! 标记。如果使用 !, Footer 中的 BREAKING CHANGE: 描述仍然是必需的。
示例：
BREAKING CHANGE: User API endpoint changed from /users to /api/v1/users.
Update all API calls to the new endpoint.
6. 完整示例

示例 1: 新功能，包含 Body

feat: add user registration endpoint

Implements a new API endpoint at /api/v1/register that allows
new users to create an account.

Includes basic input validation and password hashing using bcrypt.
Requires 'username' and 'password' in the request body.
示例 2: Bug 修复，引用 Issue

fix(frontend): correct login form submission

Resolves an issue where the login form was not correctly submitting
data when the user pressed Enter key instead of clicking the button.

Closes #35
示例 3: 包含不兼容变更的重构

refactor(database)!: update user table schema

Changes the 'email' column in the 'users' table to be non-nullable.
This requires all existing rows to have a non-empty email address.

BREAKING CHANGE: The 'email' column is now NOT NULL.
Ensure all existing user records have a valid email address before applying
this database migration. Applications reading from this column should
handle potential null values during transition.
示例 4: 文档修改

docs(install): clarify python version requirement

Updates the installation guide to explicitly state the required
Python version (3.9+) for the backend setup.
7. 不规范提交示例 (应避免)

fix bug: 太简略，不说明修复了什么 bug。
update code: 太笼统，没有说明更新的内容。
fixed login redirect issue: 动词时态错误，不是祈使句。
Added new feature.: 主题行末尾有句号。
feat(user profile) add user profile page: scope 和 subject 之间缺少冒号和空格。
8. 如何处理不规范提交

在提交前，仔细检查 Commit Message 是否符合规范。
如果最近一次提交不符合规范，可以使用 git commit --amend 命令修改提交信息。
如果需要修改更早的提交，可以使用 git rebase -i 命令（但修改已推送到远程仓库并被其他人拉取的提交需谨慎）。
可以配置 Git Hook (如 pre-commit) 或使用工具 (如 commitlint) 在提交前自动检查 Commit Message 格式。
9. 自动化工具

commitlint: 一个 linter，可以配置到 Git Hook 中，用于检查提交信息是否符合规范。
Standard Version / Conventional Changelog: 可以根据符合规范的 Git 提交历史自动生成 CHANGELOG 文件和管理版本号。
IDE/编辑器插件: 许多编辑器（如 VS Code）有插件可以辅助编写符合 Conventional Commits 规范的提交信息。