ESLint 的配置通常存储在项目根目录下的配置文件中，推荐使用 .eslintrc.js 格式，因为它提供了更大的灵活性。

1. 配置文件的选择与格式

推荐： .eslintrc.js
优点： 灵活性高，可以使用 JavaScript 逻辑来定义配置，方便根据环境或项目特性进行动态配置。
其他选项： .eslintrc.json, .eslintrc.yml, package.json 中的 eslintConfig 字段。
说明： 这些格式适用于简单的配置，但不如 .eslintrc.js 强大。
2. 基础配置与扩展 (extends)

核心理念： 强烈推荐通过继承（extends）成熟的共享配置作为基础，而不是从零开始定义所有规则。
推荐基础配置：
eslint:recommended: ESLint 官方推荐的基本规则集，覆盖一些常见的潜在问题。
流行的社区配置（根据项目类型选择）：
Airbnb: 社区中最流行的规范之一，非常严格和全面。
Standard: 另一种流行的规范，特点是不使用分号。
Google: Google 的 JavaScript 规范。
eslint-config-recommended: 针对特定环境（如 Node.js, Vue, React）的推荐配置。
配置示例 (.eslintrc.js)：
JavaScript

module.exports = {
  extends: [
    'eslint:recommended',
    // 根据您的项目选择一个或多个
    // 'airbnb-base', // 如果是纯 JavaScript 项目
    // 'plugin:vue/recommended', // 如果是 Vue 项目
    // 'plugin:@typescript-eslint/recommended', // 如果是 TypeScript 项目
  ],
  // ... 其他配置
};
多重继承： extends 可以是一个数组，后面的配置会覆盖前面的相同规则。通常将基础推荐放在前面，特定框架或环境的配置放在后面。
3. 环境配置 (env)

功能： 定义代码运行的环境，ESLint 会根据环境启用相应的全局变量和语法特性，避免“未定义”的错误。
常用环境：
browser: true: 启用浏览器环境的全局变量 (如 window, document)。
node: true: 启用 Node.js 环境的全局变量 (如 process, __dirname)。
es6: true: 启用 ES6 语法支持（如 const, let, Promises）。
jest: true: 启用 Jest 测试框架的全局变量。
mocha: true: 启用 Mocha 测试框架的全局变量。
配置示例：
JavaScript

module.exports = {
  // ... extends
  env: {
    browser: true,
    node: true,
    es6: true,
    jest: true,
  },
  // ... 其他配置
};
4. 解析器和解析器选项 (parser, parserOptions)

功能： 指定 ESLint 使用的解析器，以便正确解析特定语法（如 TypeScript, JSX, 新的 JavaScript 特性）。
常用解析器：
@babel/eslint-parser: 如果使用 Babel。
@typescript-eslint/parser: 如果使用 TypeScript。
解析器选项 (parserOptions)： 配置解析器的行为，例如指定 ECMAScript 版本，源码类型 (script 或 module)，是否启用 JSX 等。
配置示例 (TypeScript)：
JavaScript

module.exports = {
  // ... extends
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 2020, // 或更高的年份
    sourceType: 'module',
    // 如果使用需要类型信息的规则，需要配置 project
    // project: './tsconfig.json',
  },
  // ... 其他配置
};
5. 插件 (plugins)

功能： 引入第三方 ESLint 插件，提供额外的规则、环境或处理器。通常用于支持特定库、框架或语言特性。
常用插件：
@typescript-eslint: TypeScript 相关的规则。
eslint-plugin-react: React 相关的规则。
eslint-plugin-vue: Vue 相关的规则。
eslint-plugin-node: Node.js 特定的规则。
eslint-plugin-jest: Jest 测试相关的规则。
配置示例：
JavaScript

module.exports = {
  // ... extends, env
  plugins: [
    '@typescript-eslint',
    // 'react',
    // 'vue',
  ],
  // ... 其他配置
};
注意：引入插件后，通常还需要在 extends 或 rules 中启用插件提供的规则集。
6. 规则覆盖与自定义 (rules)

功能： 在继承的配置基础上，覆盖或添加您自己的规则。
规则级别：
"off" 或 0: 关闭规则。
"warn" 或 1: 开启规则，作为警告（不中断构建）。
"error" 或 2: 开启规则，作为错误（通常中断构建）。
配置示例：
JavaScript

module.exports = {
  // ... extends, env, plugins
  rules: {
    // 覆盖继承的规则或添加新规则
    'indent': ['error', 2], // 强制使用 2 个空格缩进
    'semi': ['error', 'always'], // 强制使用分号
    'no-console': 'warn', // 禁止使用 console.log，但允许 console.warn/error
    'quotes': ['error', 'single'], // 强制使用单引号
  },
  // ... 其他配置
};
细化规则： 某些规则可以配置更详细的选项，如上面的 indent 和 quotes 示例。
7. 全局变量定义 (globals)

功能： 定义代码中使用的非标准全局变量，避免 ESLint 报“未定义”错误。通常在 env 配置不够用时使用。
配置示例：
JavaScript

module.exports = {
  // ... extends, env, plugins, rules
  globals: {
    $: 'readonly', // 示例：定义一个只读的全局变量 $ (如 jQuery)
    MyGlobalVar: 'writable', // 示例：定义一个可写的全局变量
  },
  // ... 其他配置
};
8. 忽略文件 (.eslintignore)

功能： 指定 ESLint 应该忽略检查的文件和目录。通常包括构建输出目录、日志文件、第三方库等。
格式： .eslintignore 文件使用与 .gitignore 类似的语法。
常见忽略项： node_modules/, dist/, build/, coverage/ 等。
9. 与 Prettier 集成

目标： 让 ESLint 负责代码质量和潜在问题的检查，Prettier 负责纯粹的代码格式化，避免两者规则冲突。
常用插件： eslint-config-prettier (禁用 ESLint 中与 Prettier 冲突的格式规则), eslint-plugin-prettier (将 Prettier 作为 ESLint 的规则运行，不推荐，优先使用前者)。
配置示例：
JavaScript

module.exports = {
  extends: [
    // ... 其他规则集
    'prettier', // 放在最后，确保覆盖与 Prettier 冲突的格式规则
  ],
  plugins: [
    // 'prettier', // 通常不需要这个插件
  ],
  rules: {
    // 'prettier/prettier': 'error', // 如果使用了 eslint-plugin-prettier
    // ... 其他代码质量规则
  },
};
强制执行：

版本控制： 将 .eslintrc.js (或您的配置文件) 和 .eslintignore 文件提交到版本控制系统。
CI/CD 集成： 在持续集成/持续部署流程中加入 ESLint 检查步骤，不符合规范的代码阻止构建或部署。
编辑器插件： 推荐团队成员安装 ESLint 编辑器插件，在编写代码时即可获得实时反馈。
NPM Scripts： 在 package.json 中定义 lint 脚本，方便手动运行检查。