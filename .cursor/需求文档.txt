一、核心功能目标
⒈ 五维精准推荐

构建基于Web端的实时过滤系统，根据小程序/平板上传的用户健康限制，实现97%以上的菜品匹配精度
⒉ 极速推荐引擎

小程序/平板将用户信息发送至Web端，Web端在接收信息后1秒内生成推荐列表并返回，自动屏蔽所有冲突菜品（过敏原/基础病忌口）
⒊ 重点营养聚焦

动态强化显示三大核心营养素（蛋白质/脂肪/碳水的供能比）+过敏原警示标识（红色感叹号样式）
(营养聚焦相关数据由Web端计算并返回，在小程序/平板端进行展示)
二、功能模块详述
信息采集系统 (位于小程序/平板端) 1.1 精简信息输入组 * 年龄滑块 * 性别开关 * 基础病勾选区 * 忌口标签输入 * 过敏原快速筛选 * 基础病选项：糖尿病/高血压/痛风/高血脂（最多选2项） * 过敏原即时过滤：用户在小程序/平板输入时，将信息发送至Web端触发过滤 * (此模块负责在小程序/平板端收集用户输入，并将输入信息发送至Web端进行处理)
推荐结果界面 (位于小程序/平板端) 2.1 菜肴推荐列表展示 * 接收Web端返回的过滤后的菜肴推荐列表数据。 * 在小程序/平板端渲染并展示菜肴列表。 * 每道菜肴条目包含菜品名称等基本信息。 * (显示逻辑在小程序/平板端实现)
数据建模方案 (主要位于Web端) 3.1 菜品数据结构 (主要在Web端维护和使用) * 定义适合在Web端进行过滤计算的菜品数据结构。 * 数据包含与用户健康限制相关的字段（如病症黑名单、过敏原编码）。 * 字段 | 约束逻辑 | 校验规则 * ------- | -------- | -------- * 病症黑名单 | Web端自动过滤 | 采用位运算匹配疾病编码 * 过敏原编码 | Web端即时筛查 | 采用64位掩码技术 * (菜品数据存储和维护在Web端，不存储用户输入数据)
智能推荐引擎 (位于Web端) 4.1 快速过滤算法 (在Web端执行) * 接收小程序/平板发送的用户健康限制输入。 * 在Web端执行快速过滤逻辑，从菜品数据中筛选出符合条件的菜肴列表。 * python # 示例：Web端 Python 实现的过滤逻辑 def filter_dishes_web(user_input_from_client, dish_data): # 基于用户健康限制进行菜品过滤 filtered_dishes = [dish for dish in dish_data if ( (dish.allergen_mask & user_input_from_client.allergy_mask) == 0 and not (dish.disease_blacklist & user_input_from_client.diseases) )] return filtered_dishes * (核心计算和过滤逻辑完全在Web端实现) 4.2 实时预警数据生成 (在Web端实现) * 根据过滤结果，生成每道推荐菜品相关的预警信息（如过敏原提示），并随推荐列表一同返回给小程序/平板。 * (预警数据在Web端生成)
三、技术实施要点
终端适配方案
终端 | 显示策略 | 交互优化
------- | -------- | --------
微信小程序 | 接收Web端数据并列表展示 | 手势滑动切换菜品，发送用户输入至Web端
餐厅平板 | 接收Web端数据并列表展示 | 触控选择菜品，发送用户输入至Web端
(明确小程序和平台作为前端，与Web端进行数据交互)
性能优化措施
前后端通信优化：减少小程序/平板与Web端的数据传输量和频率。
Web端计算性能：优化Web端过滤算法的执行效率，确保快速响应小程序/平板的请求。
菜品数据加载与缓存：Web端对菜品数据进行高效加载和适当缓存，加速过滤过程。
(性能优化措施考虑前后端协作效率和Web端计算能力)
四、验收标准
⒈ 功能验证

根据小程序/平板发送的用户输入，Web端过滤后返回的推荐列表中，糖尿病用户100%不出现GI值>55的菜品 (如果GI值过滤是基础病过滤的一部分，且逻辑在Web端实现，则保留)
根据小程序/平板发送的用户输入，Web端过滤后返回的推荐列表中，过敏原过滤准确率≥99.9%（千次测试）
根据小程序/平板发送的用户输入，Web端过滤后返回的推荐列表中，忌口菜品100%不出现。
⒉ 性能基准

小程序/平板发送请求到Web端处理并返回推荐列表的总耗时≤1.5秒（P95）
Web端处理过滤请求的并发能力满足需求。
⒊ 交互体验

小程序/平板上的信息采集流程≤3步完成。
小程序/平板在接收Web端数据后，推荐菜肴列表快速加载和渲染。
小程序/平板端无用户状态存储，刷新或关闭后重新开始。